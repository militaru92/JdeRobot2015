// Generated by gencpp from file RosIceMessage/Laser.msg
// DO NOT EDIT!


#ifndef ROSICEMESSAGE_MESSAGE_LASER_H
#define ROSICEMESSAGE_MESSAGE_LASER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <RosIceMessage/EncodersData.h>
#include <geometry_msgs/Pose.h>

namespace RosIceMessage
{
template <class ContainerAllocator>
struct Laser_
{
  typedef Laser_<ContainerAllocator> Type;

  Laser_()
    : distanceData()
    , numLaser(0)
    , positionEncoders()
    , robottheta(0.0)
    , positionPose3D()  {
    }
  Laser_(const ContainerAllocator& _alloc)
    : distanceData(_alloc)
    , numLaser(0)
    , positionEncoders(_alloc)
    , robottheta(0.0)
    , positionPose3D(_alloc)  {
    }



   typedef std::vector<int32_t, typename ContainerAllocator::template rebind<int32_t>::other >  _distanceData_type;
  _distanceData_type distanceData;

   typedef int32_t _numLaser_type;
  _numLaser_type numLaser;

   typedef  ::RosIceMessage::EncodersData_<ContainerAllocator>  _positionEncoders_type;
  _positionEncoders_type positionEncoders;

   typedef float _robottheta_type;
  _robottheta_type robottheta;

   typedef  ::geometry_msgs::Pose_<ContainerAllocator>  _positionPose3D_type;
  _positionPose3D_type positionPose3D;




  typedef boost::shared_ptr< ::RosIceMessage::Laser_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::RosIceMessage::Laser_<ContainerAllocator> const> ConstPtr;

}; // struct Laser_

typedef ::RosIceMessage::Laser_<std::allocator<void> > Laser;

typedef boost::shared_ptr< ::RosIceMessage::Laser > LaserPtr;
typedef boost::shared_ptr< ::RosIceMessage::Laser const> LaserConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::RosIceMessage::Laser_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::RosIceMessage::Laser_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace RosIceMessage

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'geometry_msgs': ['/opt/ros/jade/share/geometry_msgs/cmake/../msg'], 'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'RosIceMessage': ['/home/ace15/Documents/JdeRobot/GoogleSummer/JdeRobot2015/catkin_ws/src/RosIceMessage/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::RosIceMessage::Laser_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::RosIceMessage::Laser_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosIceMessage::Laser_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::RosIceMessage::Laser_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosIceMessage::Laser_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::RosIceMessage::Laser_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::RosIceMessage::Laser_<ContainerAllocator> >
{
  static const char* value()
  {
    return "011f761949747e9dc826810ff0f8072a";
  }

  static const char* value(const ::RosIceMessage::Laser_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x011f761949747e9dULL;
  static const uint64_t static_value2 = 0xc826810ff0f8072aULL;
};

template<class ContainerAllocator>
struct DataType< ::RosIceMessage::Laser_<ContainerAllocator> >
{
  static const char* value()
  {
    return "RosIceMessage/Laser";
  }

  static const char* value(const ::RosIceMessage::Laser_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::RosIceMessage::Laser_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32[] distanceData\n\
int32 numLaser\n\
EncodersData positionEncoders\n\
float32 robottheta\n\
geometry_msgs/Pose positionPose3D\n\
\n\
================================================================================\n\
MSG: RosIceMessage/EncodersData\n\
float32 robotx\n\
float32 roboty\n\
float32 robottheta\n\
float32 robotcos\n\
float32 robotsin\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
";
  }

  static const char* value(const ::RosIceMessage::Laser_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::RosIceMessage::Laser_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.distanceData);
      stream.next(m.numLaser);
      stream.next(m.positionEncoders);
      stream.next(m.robottheta);
      stream.next(m.positionPose3D);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct Laser_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::RosIceMessage::Laser_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::RosIceMessage::Laser_<ContainerAllocator>& v)
  {
    s << indent << "distanceData[]" << std::endl;
    for (size_t i = 0; i < v.distanceData.size(); ++i)
    {
      s << indent << "  distanceData[" << i << "]: ";
      Printer<int32_t>::stream(s, indent + "  ", v.distanceData[i]);
    }
    s << indent << "numLaser: ";
    Printer<int32_t>::stream(s, indent + "  ", v.numLaser);
    s << indent << "positionEncoders: ";
    s << std::endl;
    Printer< ::RosIceMessage::EncodersData_<ContainerAllocator> >::stream(s, indent + "  ", v.positionEncoders);
    s << indent << "robottheta: ";
    Printer<float>::stream(s, indent + "  ", v.robottheta);
    s << indent << "positionPose3D: ";
    s << std::endl;
    Printer< ::geometry_msgs::Pose_<ContainerAllocator> >::stream(s, indent + "  ", v.positionPose3D);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROSICEMESSAGE_MESSAGE_LASER_H
